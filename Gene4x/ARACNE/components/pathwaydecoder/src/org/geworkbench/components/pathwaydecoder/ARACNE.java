/*
 * ARACNEParameters.java
 *
 * Created on April 20, 2006, 1:30 PM
 */

package org.geworkbench.components.pathwaydecoder;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NavigationFilter;
import org.geworkbench.bison.datastructure.biocollections.DSDataSet;
import org.geworkbench.bison.datastructure.biocollections.microarrays.DSMicroarraySet;
import org.geworkbench.builtin.projects.LoadData;
import org.geworkbench.engine.config.VisualPlugin;
import org.geworkbench.engine.management.Subscribe;
import org.geworkbench.engine.management.Publish;
import org.geworkbench.events.ProjectEvent;
import org.geworkbench.events.ProjectNodeAddedEvent;
import org.geworkbench.bison.datastructure.biocollections.microarrays.CSExprMicroarraySet;
import org.geworkbench.util.pathwaydecoder.mutualinformation.AdjacencyMatrix;

/**
 *
 * @author manjunath at genomecenter dot columbia.edu
 */

public class ARACNE extends javax.swing.JPanel implements VisualPlugin{
    
    /** Creates new form ARACNEParameters */
    public ARACNE() {
        initComponents();
        initFileFilters();
    }
    
    /**
     * <code>VisualPlugin</code> realization
     */
    public Component getComponent(){
        return this;
    }
        
    DSMicroarraySet maSet = null;
    @Subscribe public void receive(ProjectEvent pe, Object source){
        DSDataSet data = pe.getDataSet();
        if (data instanceof DSMicroarraySet){
            maSet = (DSMicroarraySet)data;
            inputFile = data.getPath();
            inputFileTextBox.setText(inputFile);
        }
    }
    
    @Publish public ProjectNodeAddedEvent publishDataset(ProjectNodeAddedEvent pe){
        return pe;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        outputFileTextBox = new javax.swing.JTextField();
        outputFileSetButton = new javax.swing.JButton();
        adjacencyMatrixTextBox = new javax.swing.JTextField();
        adjacencyMatrixLoadButton = new javax.swing.JButton();
        outputFileCheckBox = new javax.swing.JCheckBox();
        adjacencyMatrixCheckBox = new javax.swing.JCheckBox();
        inputFileCheckBox = new javax.swing.JCheckBox();
        inputFileTextBox = new javax.swing.JTextField();
        inputFileLoadButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        terminateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        programOutputArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        hubGenesTextBox = new javax.swing.JTextField();
        hubGenesLoadButton = new javax.swing.JButton();
        tfTextBox = new javax.swing.JTextField();
        tfListLoadButton = new javax.swing.JButton();
        tfListCheckBox = new javax.swing.JCheckBox();
        hubGeneButton = new javax.swing.JRadioButton();
        hubGenesButton = new javax.swing.JRadioButton();
        hubGeneTextBox = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        dpiToleranceLabel = new javax.swing.JLabel();
        pValueRadioButton = new javax.swing.JRadioButton();
        miThresholdRadioButton = new javax.swing.JRadioButton();
        kernelWidthTextBox = new javax.swing.JFormattedTextField();
        dpiToleranceTextBox = new javax.swing.JFormattedTextField();
        pValueTextBox = new javax.swing.JFormattedTextField();
        miThresholdTextBox = new javax.swing.JFormattedTextField();
        kernelWidthCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        filterMeanTextBox = new javax.swing.JFormattedTextField();
        filterCOVTextBox = new javax.swing.JFormattedTextField();
        mergeDuplicateProbesCheckBox = new javax.swing.JCheckBox();
        lED1 = new org.geworkbench.util.LED();

        buttonGroup1.add(pValueRadioButton);
        buttonGroup1.add(miThresholdRadioButton);

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        setMaximumSize(new java.awt.Dimension(444, 444));
        setMinimumSize(new java.awt.Dimension(444, 444));
        setPreferredSize(new java.awt.Dimension(444, 444));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel1.setMaximumSize(new java.awt.Dimension(110, 14));
        jPanel1.setMinimumSize(new java.awt.Dimension(110, 14));
        jPanel1.setName("Files");
        jPanel1.setPreferredSize(new java.awt.Dimension(110, 14));
        outputFileTextBox.setEnabled(false);
        outputFileTextBox.setMaximumSize(new java.awt.Dimension(67, 19));
        outputFileTextBox.setMinimumSize(new java.awt.Dimension(67, 19));
        outputFileTextBox.setPreferredSize(new java.awt.Dimension(67, 19));

        outputFileSetButton.setText("Set..");
        outputFileSetButton.setEnabled(false);
        outputFileSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFileSetHandler(evt);
            }
        });

        adjacencyMatrixTextBox.setEnabled(false);
        adjacencyMatrixTextBox.setMaximumSize(new java.awt.Dimension(67, 19));
        adjacencyMatrixTextBox.setMinimumSize(new java.awt.Dimension(67, 19));
        adjacencyMatrixTextBox.setPreferredSize(new java.awt.Dimension(67, 19));

        adjacencyMatrixLoadButton.setText("Load..");
        adjacencyMatrixLoadButton.setEnabled(false);
        adjacencyMatrixLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjacencyMatrixLoadHandler(evt);
            }
        });

        outputFileCheckBox.setText("Output File: ");
        outputFileCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        outputFileCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        outputFileCheckBox.setMaximumSize(new java.awt.Dimension(67, 15));
        outputFileCheckBox.setMinimumSize(new java.awt.Dimension(67, 15));
        outputFileCheckBox.setPreferredSize(new java.awt.Dimension(67, 15));
        outputFileCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                outputFileCheckBoxHandler(evt);
            }
        });

        adjacencyMatrixCheckBox.setText("Adjacency Matrix:");
        adjacencyMatrixCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        adjacencyMatrixCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        adjacencyMatrixCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                adjacencyMatrixCheckboxHandler(evt);
            }
        });

        inputFileCheckBox.setSelected(true);
        inputFileCheckBox.setText("Input File:");
        inputFileCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        inputFileCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        inputFileCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                inputFileCheckBoxHandler(evt);
            }
        });

        inputFileTextBox.setMaximumSize(new java.awt.Dimension(67, 19));
        inputFileTextBox.setMinimumSize(new java.awt.Dimension(67, 19));
        inputFileTextBox.setPreferredSize(new java.awt.Dimension(67, 19));

        inputFileLoadButton.setText("Load..");
        inputFileLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileLoadHandler(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(adjacencyMatrixCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .add(56, 56, 56))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(outputFileCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(inputFileCheckBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(adjacencyMatrixTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(outputFileTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(inputFileTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 130, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(inputFileLoadButton)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(outputFileSetButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(adjacencyMatrixLoadButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .add(33, 33, 33))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(inputFileCheckBox)
                    .add(inputFileLoadButton)
                    .add(inputFileTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, outputFileCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(outputFileTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(outputFileSetButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(adjacencyMatrixCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(adjacencyMatrixTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(adjacencyMatrixLoadButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runHandler(evt);
            }
        });

        terminateButton.setText("Terminate");
        terminateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminateHandler(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jScrollPane1.setMaximumSize(new java.awt.Dimension(160, 90));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(160, 90));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(160, 90));
        programOutputArea.setColumns(20);
        programOutputArea.setRows(5);
        programOutputArea.setText("Program Output");
        programOutputArea.setMaximumSize(new java.awt.Dimension(160, 90));
        programOutputArea.setMinimumSize(new java.awt.Dimension(160, 90));
        jScrollPane1.setViewportView(programOutputArea);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel3.setMaximumSize(new java.awt.Dimension(110, 14));
        jPanel3.setMinimumSize(new java.awt.Dimension(110, 14));
        jPanel3.setName("Lists");
        jPanel3.setPreferredSize(new java.awt.Dimension(110, 14));
        hubGenesTextBox.setText("All Genes");
        hubGenesTextBox.setEnabled(false);
        hubGenesTextBox.setMaximumSize(new java.awt.Dimension(67, 19));
        hubGenesTextBox.setMinimumSize(new java.awt.Dimension(67, 19));
        hubGenesTextBox.setPreferredSize(new java.awt.Dimension(67, 19));

        hubGenesLoadButton.setText("Load..");
        hubGenesLoadButton.setEnabled(false);
        hubGenesLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hubGenesFromFileHandler(evt);
            }
        });

        tfTextBox.setText("All TFs");
        tfTextBox.setEnabled(false);
        tfTextBox.setMaximumSize(new java.awt.Dimension(67, 19));
        tfTextBox.setMinimumSize(new java.awt.Dimension(67, 19));
        tfTextBox.setPreferredSize(new java.awt.Dimension(67, 19));

        tfListLoadButton.setText("Load..");
        tfListLoadButton.setEnabled(false);
        tfListLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfListLoadHandler(evt);
            }
        });

        tfListCheckBox.setText("Transcription Factor List:");
        tfListCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        tfListCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        tfListCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tfListCheckboxHandler(evt);
            }
        });

        hubGeneButton.setSelected(true);
        hubGeneButton.setText("Hub Gene");
        hubGeneButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hubGeneButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buttonGroup2.add(hubGeneButton);
        hubGeneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hubGeneButtonHandler(evt);
            }
        });

        hubGenesButton.setText("Hub Genes");
        hubGenesButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hubGenesButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buttonGroup2.add(hubGenesButton);
        hubGenesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hubGenesButtonHandler(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tfListCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(hubGenesButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(hubGeneButton)
                        .add(78, 78, 78)))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(hubGeneTextBox)
                    .add(tfTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(hubGenesTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .add(65, 65, 65)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(tfListLoadButton)
                    .add(hubGenesLoadButton))
                .add(33, 33, 33))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(hubGenesLoadButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfListLoadButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(hubGeneButton)
                            .add(hubGeneTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(16, 16, 16)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(hubGenesTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(hubGenesButton))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tfListCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                            .add(tfTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel2.setMaximumSize(new java.awt.Dimension(110, 14));
        jPanel2.setMinimumSize(new java.awt.Dimension(110, 14));
        jPanel2.setName("Mutual Information");
        jPanel2.setPreferredSize(new java.awt.Dimension(110, 14));
        dpiToleranceLabel.setText("DPI Tolerance:");

        pValueRadioButton.setSelected(true);
        pValueRadioButton.setText("p-value: ");
        pValueRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pValueRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pValueRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pValueRadioButtonHandler(evt);
            }
        });

        miThresholdRadioButton.setText("MI Threshold:");
        miThresholdRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        miThresholdRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));

        kernelWidthTextBox.setText("Inferred");
        kernelWidthTextBox.setToolTipText("Range: (0, 1)");
        kernelWidthTextBox.setEnabled(false);
        kernelWidthTextBox.setInputVerifier(new InputVerifier(){
            public boolean verify(JComponent input){
                JTextField tf = (JTextField) input;
                try {
                    float f = Float.parseFloat(tf.getText());
                    return f >= 0f && f < 1f;
                }
                catch (NumberFormatException nfe){
                    return false;
                }
            }
        });
        kernelWidthTextBox.setVerifyInputWhenFocusTarget(false);

        dpiToleranceTextBox.setText("1");
        dpiToleranceTextBox.setToolTipText("Range: (0, 1)");
        dpiToleranceTextBox.setInputVerifier(new InputVerifier(){
            public boolean verify(JComponent input){
                JTextField tf = (JTextField) input;
                try {
                    float f = Float.parseFloat(tf.getText());
                    return f >= 0f && f <= 1f;
                }
                catch (NumberFormatException nfe){
                    return false;
                }
            }
        });
        dpiToleranceTextBox.setVerifyInputWhenFocusTarget(false);
        dpiToleranceTextBox.setFormatterFactory(formatterFactory);
        dpiToleranceTextBox.setInputVerifier(null);

        pValueTextBox.setText("0.01");
        pValueTextBox.setToolTipText("Range: [0, 1]");
        pValueTextBox.setInputVerifier(new InputVerifier(){
            public boolean verify(JComponent input){
                JTextField tf = (JTextField) input;
                try {
                    float f = Float.parseFloat(tf.getText());
                    return f >= 0f && f <= 1f;
                }
                catch (NumberFormatException nfe){
                    return false;
                }
            }
        });
        pValueTextBox.setVerifyInputWhenFocusTarget(false);
        pValueTextBox.setFormatterFactory(pValueFormatterFactory);
        pValueTextBox.setInputVerifier(null);

        miThresholdTextBox.setText("0.2");
        miThresholdTextBox.setToolTipText("Range: [0, infinity)");
        miThresholdTextBox.setEnabled(false);
        miThresholdTextBox.setInputVerifier(new InputVerifier(){
            public boolean verify(JComponent input){
                JTextField tf = (JTextField) input;
                try {
                    float f = Float.parseFloat(tf.getText());
                    return f >= 0f && f <= 1f;
                }
                catch (NumberFormatException nfe){
                    return false;
                }
            }
        });
        miThresholdTextBox.setVerifyInputWhenFocusTarget(false);
        miThresholdTextBox.setFormatterFactory(miFormatterFactory);
        miThresholdTextBox.setInputVerifier(null);

        kernelWidthCheckBox.setText("Kernel Width:");
        kernelWidthCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        kernelWidthCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        kernelWidthCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kernelWidthCheckboxHandler(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(kernelWidthCheckBox))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(dpiToleranceLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(32, 32, 32)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(kernelWidthTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(36, 36, 36)
                        .add(pValueRadioButton)
                        .add(50, 50, 50)
                        .add(pValueTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(dpiToleranceTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(36, 36, 36)
                        .add(miThresholdRadioButton)
                        .add(28, 28, 28)
                        .add(miThresholdTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(65, 65, 65))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(kernelWidthTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(pValueRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(pValueTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(kernelWidthCheckBox))
                .add(16, 16, 16)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(dpiToleranceTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(miThresholdRadioButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                    .add(miThresholdTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dpiToleranceLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel4.setMaximumSize(new java.awt.Dimension(110, 14));
        jPanel4.setMinimumSize(new java.awt.Dimension(110, 14));
        jPanel4.setName("Filter Genes");
        jPanel4.setPreferredSize(new java.awt.Dimension(110, 14));
        jLabel1.setText("Filter based on Mean: ");

        jLabel2.setText("Filter based on COV:");

        filterMeanTextBox.setFormatterFactory(miFormatterFactory);

        filterCOVTextBox.setFormatterFactory(miFormatterFactory);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(12, 12, 12)
                .add(filterMeanTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(filterCOVTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(filterMeanTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(filterCOVTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addContainerGap())
        );

        mergeDuplicateProbesCheckBox.setText("Merge Duplicate Probes");
        mergeDuplicateProbesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        mergeDuplicateProbesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout lED1Layout = new org.jdesktop.layout.GroupLayout(lED1);
        lED1.setLayout(lED1Layout);
        lED1Layout.setHorizontalGroup(
            lED1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 15, Short.MAX_VALUE)
        );
        lED1Layout.setVerticalGroup(
            lED1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 15, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(mergeDuplicateProbesCheckBox)
                        .add(112, 112, 112)
                        .add(lED1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(15, 15, 15)
                        .add(runButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(terminateButton))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 444, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 211, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(runButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(terminateButton)
                        .add(mergeDuplicateProbesCheckBox))
                    .add(layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(lED1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void hubGeneButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hubGeneButtonHandler
        if (hubGeneButton.isSelected()){
            hubGeneTextBox.setEnabled(true);
            hubGenesTextBox.setEnabled(false);
            hubGenesLoadButton.setEnabled(false);
        }
        else {
            hubGeneTextBox.setEnabled(false);
            hubGenesTextBox.setEnabled(true);            
        }
    }//GEN-LAST:event_hubGeneButtonHandler

    private void hubGenesButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hubGenesButtonHandler
        if (hubGenesButton.isSelected()){
            hubGenesTextBox.setEnabled(true);
            hubGenesLoadButton.setEnabled(true);
            hubGeneTextBox.setEnabled(false);
        }
        else {
            hubGenesTextBox.setEnabled(false);
            hubGenesLoadButton.setEnabled(false);
            hubGeneTextBox.setEnabled(true);            
        }
    }//GEN-LAST:event_hubGenesButtonHandler
    
    private void inputFileCheckBoxHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_inputFileCheckBoxHandler
        boolean selected = inputFileCheckBox.isSelected();
        inputFileTextBox.setEnabled(selected);
        inputFileLoadButton.setEnabled(selected);
    }//GEN-LAST:event_inputFileCheckBoxHandler

    private void kernelWidthCheckboxHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kernelWidthCheckboxHandler
        kernelWidthTextBox.setEnabled(kernelWidthCheckBox.isSelected());
    }//GEN-LAST:event_kernelWidthCheckboxHandler
    
    private void tfListCheckboxHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tfListCheckboxHandler
        boolean selected = tfListCheckBox.isSelected();
        tfTextBox.setEnabled(selected);
        tfListLoadButton.setEnabled(selected);
    }//GEN-LAST:event_tfListCheckboxHandler

    private void adjacencyMatrixCheckboxHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_adjacencyMatrixCheckboxHandler
        boolean selected = adjacencyMatrixCheckBox.isSelected();
        adjacencyMatrixTextBox.setEnabled(selected);
        adjacencyMatrixLoadButton.setEnabled(selected);
    }//GEN-LAST:event_adjacencyMatrixCheckboxHandler

    private void outputFileCheckBoxHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_outputFileCheckBoxHandler
        boolean selected = outputFileCheckBox.isSelected();
        outputFileTextBox.setEnabled(selected);
        outputFileSetButton.setEnabled(selected);
    }//GEN-LAST:event_outputFileCheckBoxHandler

    private void inputFileLoadHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileLoadHandler
        String lwd = LoadData.getLastDataDirectory();
        inputFileChooser.setCurrentDirectory(new File(lwd));
        inputFileChooser.showOpenDialog(this);
        File file = inputFileChooser.getSelectedFile();
        if (file != null) {
            inputFile = inputFileChooser.getSelectedFile().getAbsolutePath();
            inputFileTextBox.setText(inputFile);
            CSExprMicroarraySet maSet = new CSExprMicroarraySet();
            maSet.read(file);
            publishDataset(new ProjectNodeAddedEvent("ARACNE Input", maSet, null));
        }
    }//GEN-LAST:event_inputFileLoadHandler

    private void pValueRadioButtonHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pValueRadioButtonHandler
        boolean selected = pValueRadioButton.isSelected();
        pValueTextBox.setEnabled(selected);
        miThresholdTextBox.setEnabled(!selected);
    }//GEN-LAST:event_pValueRadioButtonHandler

    private void outputFileSetHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFileSetHandler
        String lwd = LoadData.getLastDataDirectory();
        outputFileChooser.setCurrentDirectory(new File(lwd));
        outputFileChooser.showSaveDialog(this);
        File file = outputFileChooser.getSelectedFile();
        if (file != null) {
            outputFile = file.getAbsolutePath();
            outputFileTextBox.setText(outputFile);
        }
    }//GEN-LAST:event_outputFileSetHandler

    private void adjacencyMatrixLoadHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjacencyMatrixLoadHandler
        String lwd = LoadData.getLastDataDirectory();
        adjacencyMatrixFileChooser.setCurrentDirectory(new File(lwd));
        adjacencyMatrixFileChooser.showOpenDialog(this);
        File file = adjacencyMatrixFileChooser.getSelectedFile();
        if (file != null) {
            adjacencyMatrixFile = adjacencyMatrixFileChooser.getSelectedFile().getAbsolutePath();
            adjacencyMatrixTextBox.setText(adjacencyMatrixFile);
        }
    }//GEN-LAST:event_adjacencyMatrixLoadHandler

    private void tfListLoadHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfListLoadHandler
        String lwd = LoadData.getLastDataDirectory();
        tfListFileChooser.setCurrentDirectory(new File(lwd));
        tfListFileChooser.showOpenDialog(this);
        File file = tfListFileChooser.getSelectedFile();
        if (file != null) {
            tfListFile = tfListFileChooser.getSelectedFile().getAbsolutePath();
            tfTextBox.setText(tfListFile);
        }
    }//GEN-LAST:event_tfListLoadHandler

    private void hubGenesFromFileHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hubGenesFromFileHandler
        String lwd = LoadData.getLastDataDirectory();
        hubGenesFileChooser.setCurrentDirectory(new File(lwd));
        hubGenesFileChooser.showOpenDialog(this);
        File file = hubGenesFileChooser.getSelectedFile();
        if (file != null) {
            hubGenesFile = hubGenesFileChooser.getSelectedFile().getAbsolutePath();
            hubGenesTextBox.setText(hubGenesFile);
        }
    }//GEN-LAST:event_hubGenesFromFileHandler

    private void terminateHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminateHandler
        if (p != null){
            p.destroy();
            terminatePressed = true;
            lED1.stop();
        }
    }//GEN-LAST:event_terminateHandler

    boolean terminatePressed = false;
    private void initFileFilters(){
        inputFileChooser.setFileFilter(new FileFilter(){
            public String getDescription() {
                return "EXP File";
            }
            
            public boolean accept(File f) {
                boolean returnVal = false;
                if (f.isDirectory() || f.getName().endsWith("exp")) {
                    return true;
                }
                return returnVal;
            }
        });
        inputFileChooser.setMultiSelectionEnabled(false);
        
        outputFileChooser.setFileFilter(new FileFilter(){
            public String getDescription() {
                return "Adjacency Matrix output file";
            }
            
            public boolean accept(File f) {
                boolean returnVal = false;
                if (f.isDirectory() || f.getName().endsWith("adj")) {
                    return true;
                }
                return returnVal;
            }
        });
        outputFileChooser.setMultiSelectionEnabled(false);
        
        adjacencyMatrixFileChooser.setFileFilter(new FileFilter(){
            public String getDescription() {
                return "Precomputed Adjacency Matrix file";
            }
            
            public boolean accept(File f) {
                boolean returnVal = false;
                if (f.isDirectory() || f.getName().endsWith("adj")) {
                    return true;
                }
                return returnVal;
            }
        });
        adjacencyMatrixFileChooser.setMultiSelectionEnabled(false);

        hubGenesFileChooser.setFileFilter(new FileFilter(){
            public String getDescription() {
                return "List of Genes for computing neighbors of";
            }
            
            public boolean accept(File f) {
                boolean returnVal = false;
                if (f.isDirectory() || f.getName().endsWith("txt")) {
                    return true;
                }
                return returnVal;
            }
        });
        hubGenesFileChooser.setMultiSelectionEnabled(false);

        tfListFileChooser.setFileFilter(new FileFilter(){
            public String getDescription() {
                return "List of Transcription Factors";
            }
            
            public boolean accept(File f) {
                boolean returnVal = false;
                if (f.isDirectory() || f.getName().endsWith("txt")) {
                    return true;
                }
                return returnVal;
            }
        });
        tfListFileChooser.setMultiSelectionEnabled(false);
    }
   
    private String composeCommand(){
        programOutput = "";
        programOutputArea.setText(programOutput);
        String os = System.getenv("OS");
        if (os == null)
            os = System.getenv("OSTYPE");
        String command = "";
        String userDir = System.getProperty("user.dir");        
        if (os != null && os.contains("Win")){
            command += userDir  + File.separator + "aracne.exe";
        }
        else if (os != null && os.contains("linux")){
            command += userDir  + File.separator + "aracne";            
        }
        else if (os != null && (os.contains("Mac") || os.contains("Darwin"))){
            command += userDir  + File.separator + "aracne.bin";            
        }
        else {
            command += userDir  + File.separator + "aracne";            
        }
        if (inputFile != null && !inputFileTextBox.getText().equals("") && inputFileTextBox.isEnabled())
            command += " -i " + "\"" + inputFileTextBox.getText() + "\"";
        if (outputFile != null && !outputFileTextBox.getText().equals("") && outputFileTextBox.isEnabled())
            command += " -o " + outputFileTextBox.getText();
        if (adjacencyMatrixFile != null && !adjacencyMatrixFile.equals("") && adjacencyMatrixTextBox.isEnabled())
            command += " -j " + adjacencyMatrixFile;
        if (hubGenesButton.isSelected() && !hubGenesTextBox.getText().equals(""))
            command += " -s " + hubGenesTextBox.getText();
        if (hubGeneButton.isSelected() && !hubGeneTextBox.getText().equals(""))
            command += " -h " + hubGeneTextBox.getText();
        if (tfListFile != null && !tfListFile.equals("") && tfTextBox.isEnabled())
            command += " -l " + tfTextBox.getText();
        if (pValueTextBox.getText() != null && !pValueTextBox.getText().equals("") && pValueTextBox.isEnabled())
            command += " -p " + pValueTextBox.getText();
        if (miThresholdTextBox.getText() != null && !miThresholdTextBox.getText().equals("") && miThresholdTextBox.isEnabled())
            command += " -t " + miThresholdTextBox.getText();
        if (kernelWidthTextBox.getText() != null && !kernelWidthTextBox.getText().equals("") && kernelWidthTextBox.isEnabled()){
            if (kernelWidthTextBox.getText().equals("Inferred"))
                kernelWidthTextBox.setText("0.15");
            command += " -k " + kernelWidthTextBox.getText();
        }
        if (dpiToleranceTextBox.getText() != null && !dpiToleranceTextBox.getText().equals("") && dpiToleranceTextBox.isEnabled())
            command += " -e " + dpiToleranceTextBox.getText();
        if (!filterMeanTextBox.getText().equals("") && !filterCOVTextBox.getText().equals(""))
            command += " -f " + filterMeanTextBox.getText() + " " + filterCOVTextBox.getText();
        
        return command;
    }
    
    private Process p = null;
    private String programOutput = "";
    private BufferedReader stdout = null;
    private void runHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runHandler
        try {
            String command = composeCommand();
            programOutput += command + "\n";
            programOutputArea.setText(programOutput);
            p = Runtime.getRuntime().exec(command);
            lED1.start();
            terminatePressed = false;
            stdout = new BufferedReader(new InputStreamReader(p.getInputStream()));
            final Timer timer = new Timer();
            timer.schedule(new TimerTask(){
                public void run(){
                    try {
                        String line = stdout.readLine();
                        if (line != null){
                            programOutput += line + "\n";
                            programOutputArea.setText(programOutput);
                        }
                    } catch (IOException ioe) {}
                }
            }, new Date(), 1);
            final Timer timer2 = new Timer();
            timer2.schedule(new TimerTask(){
                public void run(){
                    boolean isRunning = true;
                    while (isRunning) {
                        try {
                            p.exitValue(); // Throws exception if alive
                            isRunning = false;
                        } catch (IllegalThreadStateException e) {
                            try {
                                Thread.sleep(1000);
                            } catch (InterruptedException ignore) {;}
                        }
                    }
                    if (mergeDuplicateProbesCheckBox.isSelected() && !terminatePressed){
                        AdjacencyMatrix adjMat = new AdjacencyMatrix();
                        if (!(outputFile != null && !outputFile.equals("") && outputFileTextBox.isEnabled())){
                            String[] ops = programOutputArea.getText().split("\n");
                            for (String op : ops){
                                if (op.startsWith("Writing")){
                                    String[] toks = op.split(" ");
                                    outputFile = toks[toks.length - 1];
                                    System.out.println("outputFile: " + outputFile);
                                }
                            }
                        }
                        if (maSet != null){
                            adjMat.readGeneNames(outputFile, maSet);
                            adjMat.mergeDuplicateProbesToFile(maSet, outputFile);
                        }                        
                    }
                    lED1.stop();
                    timer.cancel();
                    timer2.cancel();
                }
            }, new Date(), 1000);
        } catch (IOException ioe){ioe.printStackTrace();}
    }//GEN-LAST:event_runHandler
    
    private String inputFile = null;
    private String outputFile = null;
    private String adjacencyMatrixFile = null;
    private String hubGenesFile = null;
    private String tfListFile = null;
    
    private String hubGene = null;
    
    private JFileChooser inputFileChooser = new JFileChooser();
    private JFileChooser outputFileChooser = new JFileChooser();
    private JFileChooser adjacencyMatrixFileChooser = new JFileChooser();
    private JFileChooser hubGenesFileChooser = new JFileChooser();
    private JFileChooser tfListFileChooser = new JFileChooser();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox adjacencyMatrixCheckBox;
    private javax.swing.JButton adjacencyMatrixLoadButton;
    private javax.swing.JTextField adjacencyMatrixTextBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel dpiToleranceLabel;
    private javax.swing.JFormattedTextField dpiToleranceTextBox;
    private javax.swing.JFormattedTextField filterCOVTextBox;
    private javax.swing.JFormattedTextField filterMeanTextBox;
    private javax.swing.JRadioButton hubGeneButton;
    private javax.swing.JTextField hubGeneTextBox;
    private javax.swing.JRadioButton hubGenesButton;
    private javax.swing.JButton hubGenesLoadButton;
    private javax.swing.JTextField hubGenesTextBox;
    private javax.swing.JCheckBox inputFileCheckBox;
    private javax.swing.JButton inputFileLoadButton;
    private javax.swing.JTextField inputFileTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox kernelWidthCheckBox;
    private javax.swing.JFormattedTextField kernelWidthTextBox;
    private org.geworkbench.util.LED lED1;
    private javax.swing.JCheckBox mergeDuplicateProbesCheckBox;
    private javax.swing.JRadioButton miThresholdRadioButton;
    private javax.swing.JFormattedTextField miThresholdTextBox;
    private javax.swing.JCheckBox outputFileCheckBox;
    private javax.swing.JButton outputFileSetButton;
    private javax.swing.JTextField outputFileTextBox;
    private javax.swing.JRadioButton pValueRadioButton;
    private javax.swing.JFormattedTextField pValueTextBox;
    private javax.swing.JTextArea programOutputArea;
    private javax.swing.JButton runButton;
    private javax.swing.JButton terminateButton;
    private javax.swing.JCheckBox tfListCheckBox;
    private javax.swing.JButton tfListLoadButton;
    private javax.swing.JTextField tfTextBox;
    // End of variables declaration//GEN-END:variables

    JFormattedTextField.AbstractFormatterFactory formatterFactory =
            new DefaultFormatterFactory(){
        public JFormattedTextField.AbstractFormatter getDefaultFormatter(){
            return new JFormattedTextField.AbstractFormatter(){
                public Object stringToValue(String text){
                    try {
                        double d = Double.parseDouble(text);
                        if (d < 0d || d > 1d)
                            return "";
                        return new Double(d);
                    }
                    catch (NumberFormatException nfe){
                        return "";
                    }
                }
                public String valueToString(Object value){                    
                    if (value != null){
                        return value.toString();
                    }
                    return "";
                }
                protected NavigationFilter getNavigationFilter(){
                    return null;
                }
            };
        }
    };

    JFormattedTextField.AbstractFormatterFactory pValueFormatterFactory =
            new DefaultFormatterFactory(){
        public JFormattedTextField.AbstractFormatter getDefaultFormatter(){
            return new JFormattedTextField.AbstractFormatter(){
                public Object stringToValue(String text){
                    try {
                        double d = Double.parseDouble(text);
                        if (d < 0d || d > 1d)
                            return "";
                        return new Double(d);
                    }
                    catch (NumberFormatException nfe){
                        return "";
                    }
                }
                public String valueToString(Object value){                    
                    if (value != null){
                        return value.toString();
                    }
                    return "";
                }
                
                protected NavigationFilter getNavigationFilter(){
                    return null;
                }
            };
        }
    };
    
    JFormattedTextField.AbstractFormatterFactory miFormatterFactory =
            new DefaultFormatterFactory(){
        public JFormattedTextField.AbstractFormatter getDefaultFormatter(){
            return new JFormattedTextField.AbstractFormatter(){
                public Object stringToValue(String text){
                    try {
                        double d = Double.parseDouble(text);
                        if (d < 0d)
                            return "";
                        return new Double(d);
                    }
                    catch (NumberFormatException nfe){
                        return "";
                    }
                }
                public String valueToString(Object value){
                    if (value != null)
                        return value.toString();
                    return "";
                }
                protected NavigationFilter getNavigationFilter(){
                    return null;
                }
            };
        }
    };
}